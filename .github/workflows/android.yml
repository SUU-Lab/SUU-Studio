# This is a basic workflow to help you get started with Actions

name: Android-CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Android:
  
    runs-on: macOS-latest
    
    if: |
      !contains(github.event.head_commit.message, '[skip ci]')
      && !contains(github.event.head_commit.message, '[skip ci]')
      && !contains(github.event.head_commit.message, '[Windows]')
      && !contains(github.event.head_commit.message, '[Linux]')
    
    strategy:
      matrix:
        api-level: [21]
        configuration: [Debug]
        ndk: [21.4.7075529]
        cmake: [3.18.1]
        abi: [x86_64]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.1.0
        
      - name: Setup Java 11
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 11
        
      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/buildSrc/**/*.kt') }}
        
      - name: AVD cache
        uses: actions/cache@v2
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}-${{ matrix.abi }}
        
      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          arch: ${{ matrix.abi }}
          profile: Nexus 6
          api-level: ${{ matrix.api-level }}
          ndk: ${{ matrix.ndk }}
          cmake: ${{ matrix.cmake }}
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."
        
      - name: Install Cache
        uses: actions/cache@v2
        id: install-cache
        with:
          path: ./ThirdParty/Install/*
          key: install-cachev1

      - name: Install gRPC
        if: steps.install-cache.outputs.cache-hit != 'true'
        run: |
          brew install grpc

      - name: Install
        if: steps.install-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          arch: ${{ matrix.abi }}
          profile: Nexus 6
          api-level: ${{ matrix.api-level }}
          ndk: ${{ matrix.ndk }}
          cmake: ${{ matrix.cmake }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: |
            chmod +x ${{ github.workspace }}/setup-android.sh
            ${{ github.workspace }}/setup-android.sh $ANDROID_SDK_ROOT

      - name: Build
        working-directory: ./Android/AndroidStudio/SUU-Runtime
        run: |
          chmod +x ./gradlew
          ./gradlew --no-daemon build${{ matrix.configuration }}
          
      - name: Test
        uses: reactivecircus/android-emulator-runner@v2
        with:
          arch: ${{ matrix.abi }}
          profile: Nexus 6
          api-level: ${{ matrix.api-level }}
          ndk: ${{ matrix.ndk }}
          cmake: ${{ matrix.cmake }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: false
          script: |
            echo "=== build tests ==="
            $ANDROID_SDK_ROOT/cmake/${{ matrix.cmake }}/bin/cmake -H${{ github.workspace }}/Android/AndroidStudio/SUU-Runtime/app/src/main/cpp/tests -DCMAKE_SYSTEM_NAME=Android -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_SYSTEM_VERSION=${{ matrix.api-level }} -DANDROID_PLATFORM=android-${{ matrix.api-level }} -DANDROID_ABI=${{ matrix.abi }} -DCMAKE_ANDROID_ARCH_ABI=${{ matrix.abi }} -DANDROID_NDK=$ANDROID_SDK_ROOT/ndk/${{ matrix.ndk }} -DCMAKE_ANDROID_NDK=$ANDROID_SDK_ROOT/ndk/${{ matrix.ndk }} -DCMAKE_TOOLCHAIN_FILE=$ANDROID_SDK_ROOT/ndk/${{ matrix.ndk }}/build/cmake/android.toolchain.cmake -DCMAKE_MAKE_PROGRAM=$ANDROID_SDK_ROOT/cmake/${{ matrix.cmake }}/bin/ninja -DCMAKE_CXX_FLAGS=-std=c++14 -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{ github.workspace }}/Android/AndroidStudio/SUU-Runtime/app/src/main/cpp/tests/intermediates/${{ matrix.configuration }}/${{ matrix.abi }} -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${{ github.workspace }}/Android/AndroidStudio/SUU-Runtime/app/src/main/cpp/tests/intermediates/${{ matrix.configuration }}/${{ matrix.abi }} -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -B${{ github.workspace }}/Android/AndroidStudio/SUU-Runtime/app/src/main/cpp/tests/build/${{ matrix.configuration }}/${{ matrix.abi }} -GNinja
            $ANDROID_SDK_ROOT/cmake/${{ matrix.cmake }}/bin/cmake --build ${{ github.workspace }}/Android/AndroidStudio/SUU-Runtime/app/src/main/cpp/tests/build/${{ matrix.configuration }}/${{ matrix.abi }}
            echo "=== run tests ==="
            adb push ${{ github.workspace }}/Android/AndroidStudio/SUU-Runtime/app/src/main/cpp/tests/intermediates/${{ matrix.configuration }}/${{ matrix.abi }}/suu_runtime_test /data/local/tmp/
            adb shell chmod 775 /data/local/tmp/suu_runtime_test
            adb shell "/data/local/tmp/suu_runtime_test && touch /data/local/tmp/SUCCESS.txt"
            adb pull /data/local/tmp/SUCCESS.txt ${{ github.workspace }}/Android/AndroidStudio/SUU-Runtime/app/src/main/cpp/tests/SUCCESS.txt
