// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RuntimeCapture.proto

#include "RuntimeCapture.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace SUU {
namespace Studio {
constexpr SendImageRequest::SendImageRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buffer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , width_(0)
  , height_(0)
  , buffer_width_(0)
  , buffer_height_(0){}
struct SendImageRequestDefaultTypeInternal {
  constexpr SendImageRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendImageRequestDefaultTypeInternal() {}
  union {
    SendImageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendImageRequestDefaultTypeInternal _SendImageRequest_default_instance_;
constexpr SendImageResponse::SendImageResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : received_bytes_(0){}
struct SendImageResponseDefaultTypeInternal {
  constexpr SendImageResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendImageResponseDefaultTypeInternal() {}
  union {
    SendImageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendImageResponseDefaultTypeInternal _SendImageResponse_default_instance_;
}  // namespace Studio
}  // namespace SUU
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_RuntimeCapture_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_RuntimeCapture_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_RuntimeCapture_2eproto = nullptr;

const uint32_t TableStruct_RuntimeCapture_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SUU::Studio::SendImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SUU::Studio::SendImageRequest, width_),
  PROTOBUF_FIELD_OFFSET(::SUU::Studio::SendImageRequest, height_),
  PROTOBUF_FIELD_OFFSET(::SUU::Studio::SendImageRequest, buffer_width_),
  PROTOBUF_FIELD_OFFSET(::SUU::Studio::SendImageRequest, buffer_height_),
  PROTOBUF_FIELD_OFFSET(::SUU::Studio::SendImageRequest, buffer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SUU::Studio::SendImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SUU::Studio::SendImageResponse, received_bytes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SUU::Studio::SendImageRequest)},
  { 11, -1, -1, sizeof(::SUU::Studio::SendImageResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SUU::Studio::_SendImageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::SUU::Studio::_SendImageResponse_default_instance_),
};

const char descriptor_table_protodef_RuntimeCapture_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024RuntimeCapture.proto\022\nSUU.Studio\"n\n\020Se"
  "ndImageRequest\022\r\n\005width\030\001 \001(\005\022\016\n\006height\030"
  "\002 \001(\005\022\024\n\014buffer_width\030\003 \001(\005\022\025\n\rbuffer_he"
  "ight\030\004 \001(\005\022\016\n\006buffer\030\005 \001(\014\"+\n\021SendImageR"
  "esponse\022\026\n\016received_bytes\030\001 \001(\0052^\n\016Runti"
  "meCapture\022L\n\tSendImage\022\034.SUU.Studio.Send"
  "ImageRequest\032\035.SUU.Studio.SendImageRespo"
  "nse\"\000(\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_RuntimeCapture_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RuntimeCapture_2eproto = {
  false, false, 295, descriptor_table_protodef_RuntimeCapture_2eproto, "RuntimeCapture.proto", 
  &descriptor_table_RuntimeCapture_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_RuntimeCapture_2eproto::offsets,
  file_level_metadata_RuntimeCapture_2eproto, file_level_enum_descriptors_RuntimeCapture_2eproto, file_level_service_descriptors_RuntimeCapture_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_RuntimeCapture_2eproto_getter() {
  return &descriptor_table_RuntimeCapture_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_RuntimeCapture_2eproto(&descriptor_table_RuntimeCapture_2eproto);
namespace SUU {
namespace Studio {

// ===================================================================

class SendImageRequest::_Internal {
 public:
};

SendImageRequest::SendImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SUU.Studio.SendImageRequest)
}
SendImageRequest::SendImageRequest(const SendImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buffer().empty()) {
    buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buffer(), 
      GetArenaForAllocation());
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&buffer_height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(buffer_height_));
  // @@protoc_insertion_point(copy_constructor:SUU.Studio.SendImageRequest)
}

inline void SendImageRequest::SharedCtor() {
buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&buffer_height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(buffer_height_));
}

SendImageRequest::~SendImageRequest() {
  // @@protoc_insertion_point(destructor:SUU.Studio.SendImageRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendImageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendImageRequest::ArenaDtor(void* object) {
  SendImageRequest* _this = reinterpret_cast< SendImageRequest* >(object);
  (void)_this;
}
void SendImageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SUU.Studio.SendImageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buffer_.ClearToEmpty();
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buffer_height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(buffer_height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendImageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 buffer_width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          buffer_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 buffer_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          buffer_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes buffer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendImageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SUU.Studio.SendImageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  // int32 buffer_width = 3;
  if (this->_internal_buffer_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_buffer_width(), target);
  }

  // int32 buffer_height = 4;
  if (this->_internal_buffer_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_buffer_height(), target);
  }

  // bytes buffer = 5;
  if (!this->_internal_buffer().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SUU.Studio.SendImageRequest)
  return target;
}

size_t SendImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SUU.Studio.SendImageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buffer = 5;
  if (!this->_internal_buffer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buffer());
  }

  // int32 width = 1;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 2;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // int32 buffer_width = 3;
  if (this->_internal_buffer_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_buffer_width());
  }

  // int32 buffer_height = 4;
  if (this->_internal_buffer_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_buffer_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendImageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendImageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendImageRequest::GetClassData() const { return &_class_data_; }

void SendImageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendImageRequest *>(to)->MergeFrom(
      static_cast<const SendImageRequest &>(from));
}


void SendImageRequest::MergeFrom(const SendImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SUU.Studio.SendImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_buffer().empty()) {
    _internal_set_buffer(from._internal_buffer());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_buffer_width() != 0) {
    _internal_set_buffer_width(from._internal_buffer_width());
  }
  if (from._internal_buffer_height() != 0) {
    _internal_set_buffer_height(from._internal_buffer_height());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendImageRequest::CopyFrom(const SendImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SUU.Studio.SendImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendImageRequest::IsInitialized() const {
  return true;
}

void SendImageRequest::InternalSwap(SendImageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buffer_, lhs_arena,
      &other->buffer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendImageRequest, buffer_height_)
      + sizeof(SendImageRequest::buffer_height_)
      - PROTOBUF_FIELD_OFFSET(SendImageRequest, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendImageRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_RuntimeCapture_2eproto_getter, &descriptor_table_RuntimeCapture_2eproto_once,
      file_level_metadata_RuntimeCapture_2eproto[0]);
}

// ===================================================================

class SendImageResponse::_Internal {
 public:
};

SendImageResponse::SendImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SUU.Studio.SendImageResponse)
}
SendImageResponse::SendImageResponse(const SendImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  received_bytes_ = from.received_bytes_;
  // @@protoc_insertion_point(copy_constructor:SUU.Studio.SendImageResponse)
}

inline void SendImageResponse::SharedCtor() {
received_bytes_ = 0;
}

SendImageResponse::~SendImageResponse() {
  // @@protoc_insertion_point(destructor:SUU.Studio.SendImageResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SendImageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SendImageResponse::ArenaDtor(void* object) {
  SendImageResponse* _this = reinterpret_cast< SendImageResponse* >(object);
  (void)_this;
}
void SendImageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendImageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SUU.Studio.SendImageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  received_bytes_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendImageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 received_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          received_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendImageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SUU.Studio.SendImageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 received_bytes = 1;
  if (this->_internal_received_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_received_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SUU.Studio.SendImageResponse)
  return target;
}

size_t SendImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SUU.Studio.SendImageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 received_bytes = 1;
  if (this->_internal_received_bytes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_received_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendImageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SendImageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendImageResponse::GetClassData() const { return &_class_data_; }

void SendImageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SendImageResponse *>(to)->MergeFrom(
      static_cast<const SendImageResponse &>(from));
}


void SendImageResponse::MergeFrom(const SendImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SUU.Studio.SendImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_received_bytes() != 0) {
    _internal_set_received_bytes(from._internal_received_bytes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendImageResponse::CopyFrom(const SendImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SUU.Studio.SendImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendImageResponse::IsInitialized() const {
  return true;
}

void SendImageResponse::InternalSwap(SendImageResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(received_bytes_, other->received_bytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendImageResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_RuntimeCapture_2eproto_getter, &descriptor_table_RuntimeCapture_2eproto_once,
      file_level_metadata_RuntimeCapture_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Studio
}  // namespace SUU
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SUU::Studio::SendImageRequest* Arena::CreateMaybeMessage< ::SUU::Studio::SendImageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SUU::Studio::SendImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SUU::Studio::SendImageResponse* Arena::CreateMaybeMessage< ::SUU::Studio::SendImageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SUU::Studio::SendImageResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
