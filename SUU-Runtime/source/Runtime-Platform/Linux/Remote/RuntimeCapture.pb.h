// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RuntimeCapture.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RuntimeCapture_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RuntimeCapture_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RuntimeCapture_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RuntimeCapture_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RuntimeCapture_2eproto;
namespace SUU {
namespace Studio {
class SendImageRequest;
struct SendImageRequestDefaultTypeInternal;
extern SendImageRequestDefaultTypeInternal _SendImageRequest_default_instance_;
class SendImageResponse;
struct SendImageResponseDefaultTypeInternal;
extern SendImageResponseDefaultTypeInternal _SendImageResponse_default_instance_;
}  // namespace Studio
}  // namespace SUU
PROTOBUF_NAMESPACE_OPEN
template<> ::SUU::Studio::SendImageRequest* Arena::CreateMaybeMessage<::SUU::Studio::SendImageRequest>(Arena*);
template<> ::SUU::Studio::SendImageResponse* Arena::CreateMaybeMessage<::SUU::Studio::SendImageResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SUU {
namespace Studio {

// ===================================================================

class SendImageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SUU.Studio.SendImageRequest) */ {
 public:
  inline SendImageRequest() : SendImageRequest(nullptr) {}
  ~SendImageRequest() override;
  explicit constexpr SendImageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendImageRequest(const SendImageRequest& from);
  SendImageRequest(SendImageRequest&& from) noexcept
    : SendImageRequest() {
    *this = ::std::move(from);
  }

  inline SendImageRequest& operator=(const SendImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendImageRequest& operator=(SendImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendImageRequest* internal_default_instance() {
    return reinterpret_cast<const SendImageRequest*>(
               &_SendImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SendImageRequest& a, SendImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendImageRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendImageRequest* New() const final {
    return new SendImageRequest();
  }

  SendImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendImageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendImageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendImageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SUU.Studio.SendImageRequest";
  }
  protected:
  explicit SendImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 5,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kBufferWidthFieldNumber = 3,
    kBufferHeightFieldNumber = 4,
  };
  // bytes buffer = 5;
  void clear_buffer();
  const std::string& buffer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buffer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buffer();
  PROTOBUF_MUST_USE_RESULT std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // int32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 buffer_width = 3;
  void clear_buffer_width();
  ::PROTOBUF_NAMESPACE_ID::int32 buffer_width() const;
  void set_buffer_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buffer_width() const;
  void _internal_set_buffer_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 buffer_height = 4;
  void clear_buffer_height();
  ::PROTOBUF_NAMESPACE_ID::int32 buffer_height() const;
  void set_buffer_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buffer_height() const;
  void _internal_set_buffer_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SUU.Studio.SendImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 buffer_width_;
  ::PROTOBUF_NAMESPACE_ID::int32 buffer_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RuntimeCapture_2eproto;
};
// -------------------------------------------------------------------

class SendImageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SUU.Studio.SendImageResponse) */ {
 public:
  inline SendImageResponse() : SendImageResponse(nullptr) {}
  ~SendImageResponse() override;
  explicit constexpr SendImageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendImageResponse(const SendImageResponse& from);
  SendImageResponse(SendImageResponse&& from) noexcept
    : SendImageResponse() {
    *this = ::std::move(from);
  }

  inline SendImageResponse& operator=(const SendImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendImageResponse& operator=(SendImageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendImageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendImageResponse* internal_default_instance() {
    return reinterpret_cast<const SendImageResponse*>(
               &_SendImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendImageResponse& a, SendImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendImageResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendImageResponse* New() const final {
    return new SendImageResponse();
  }

  SendImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendImageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendImageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SendImageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SUU.Studio.SendImageResponse";
  }
  protected:
  explicit SendImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceivedBytesFieldNumber = 1,
  };
  // int32 received_bytes = 1;
  void clear_received_bytes();
  ::PROTOBUF_NAMESPACE_ID::int32 received_bytes() const;
  void set_received_bytes(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_received_bytes() const;
  void _internal_set_received_bytes(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:SUU.Studio.SendImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 received_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RuntimeCapture_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SendImageRequest

// int32 width = 1;
inline void SendImageRequest::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendImageRequest::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendImageRequest::width() const {
  // @@protoc_insertion_point(field_get:SUU.Studio.SendImageRequest.width)
  return _internal_width();
}
inline void SendImageRequest::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void SendImageRequest::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:SUU.Studio.SendImageRequest.width)
}

// int32 height = 2;
inline void SendImageRequest::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendImageRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendImageRequest::height() const {
  // @@protoc_insertion_point(field_get:SUU.Studio.SendImageRequest.height)
  return _internal_height();
}
inline void SendImageRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void SendImageRequest::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:SUU.Studio.SendImageRequest.height)
}

// int32 buffer_width = 3;
inline void SendImageRequest::clear_buffer_width() {
  buffer_width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendImageRequest::_internal_buffer_width() const {
  return buffer_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendImageRequest::buffer_width() const {
  // @@protoc_insertion_point(field_get:SUU.Studio.SendImageRequest.buffer_width)
  return _internal_buffer_width();
}
inline void SendImageRequest::_internal_set_buffer_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buffer_width_ = value;
}
inline void SendImageRequest::set_buffer_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buffer_width(value);
  // @@protoc_insertion_point(field_set:SUU.Studio.SendImageRequest.buffer_width)
}

// int32 buffer_height = 4;
inline void SendImageRequest::clear_buffer_height() {
  buffer_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendImageRequest::_internal_buffer_height() const {
  return buffer_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendImageRequest::buffer_height() const {
  // @@protoc_insertion_point(field_get:SUU.Studio.SendImageRequest.buffer_height)
  return _internal_buffer_height();
}
inline void SendImageRequest::_internal_set_buffer_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  buffer_height_ = value;
}
inline void SendImageRequest::set_buffer_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_buffer_height(value);
  // @@protoc_insertion_point(field_set:SUU.Studio.SendImageRequest.buffer_height)
}

// bytes buffer = 5;
inline void SendImageRequest::clear_buffer() {
  buffer_.ClearToEmpty();
}
inline const std::string& SendImageRequest::buffer() const {
  // @@protoc_insertion_point(field_get:SUU.Studio.SendImageRequest.buffer)
  return _internal_buffer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendImageRequest::set_buffer(ArgT0&& arg0, ArgT... args) {
 
 buffer_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SUU.Studio.SendImageRequest.buffer)
}
inline std::string* SendImageRequest::mutable_buffer() {
  std::string* _s = _internal_mutable_buffer();
  // @@protoc_insertion_point(field_mutable:SUU.Studio.SendImageRequest.buffer)
  return _s;
}
inline const std::string& SendImageRequest::_internal_buffer() const {
  return buffer_.Get();
}
inline void SendImageRequest::_internal_set_buffer(const std::string& value) {
  
  buffer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendImageRequest::_internal_mutable_buffer() {
  
  return buffer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendImageRequest::release_buffer() {
  // @@protoc_insertion_point(field_release:SUU.Studio.SendImageRequest.buffer)
  return buffer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendImageRequest::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  buffer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:SUU.Studio.SendImageRequest.buffer)
}

// -------------------------------------------------------------------

// SendImageResponse

// int32 received_bytes = 1;
inline void SendImageResponse::clear_received_bytes() {
  received_bytes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendImageResponse::_internal_received_bytes() const {
  return received_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendImageResponse::received_bytes() const {
  // @@protoc_insertion_point(field_get:SUU.Studio.SendImageResponse.received_bytes)
  return _internal_received_bytes();
}
inline void SendImageResponse::_internal_set_received_bytes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  received_bytes_ = value;
}
inline void SendImageResponse::set_received_bytes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_received_bytes(value);
  // @@protoc_insertion_point(field_set:SUU.Studio.SendImageResponse.received_bytes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Studio
}  // namespace SUU

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RuntimeCapture_2eproto
